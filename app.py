# -*- coding: utf-8 -*-
import os
import io
import pandas as pd
import streamlit as st

from crawler import crawl
from bayes import counts_from_days, dirichlet_smoothing, chi_square_test, rank

# ============ PAGE CONFIG & THEME TWEAK ============
st.set_page_config(
    page_title="XSMB Loto ‚Äì Bayes/Dirichlet",
    page_icon="üéØ",
    layout="wide",
)

# Minimal css polish
st.markdown("""
<style>
/* TƒÉng ƒë·ªô s·∫Øc n√©t cho b·∫£ng v√† card */
.block-container {padding-top: 1.2rem; padding-bottom: 1.2rem;}
div[data-testid="stMetricValue"] {font-weight: 700;}
thead tr th {font-weight: 700 !important;}
/* N√∫t b·∫•m full width g·ªçn g√†ng */
button[kind="primary"] {border-radius: 10px; font-weight: 600;}
/* H·ªôp th√¥ng tin */
.info-card {padding: 0.9rem 1rem; border: 1px solid #E5E7EB; border-radius: 10px; background: #FAFAFA;}
.small {font-size: 0.86rem; color: #6B7280;}
</style>
""", unsafe_allow_html=True)

# ============ HEADER ============
st.title("üéØ XSMB Loto ‚Äì Ph√¢n t√≠ch Bayes (Dirichlet)")
st.caption("Th·ªëng k√™ 2 s·ªë ƒëu√¥i 00‚Äì99 trong 60/90 ng√†y ‚Ä¢ L√†m m∆∞·ª£t Bayes ‚Ä¢ Ki·ªÉm ƒë·ªãnh œá¬≤ ‚Ä¢ G·ª£i √Ω s·ªë n·ªïi b·∫≠t")

# ============ SIDEBAR CONTROLS ============
with st.sidebar:
    st.header("‚öôÔ∏è C·∫•u h√¨nh")
    window = st.selectbox("Ph√¢n t√≠ch d·ªØ li·ªáu (ng√†y)", ["60", "90"], index=0,
                          help="Ch·ªçn kho·∫£ng ng√†y g·∫ßn nh·∫•t ƒë·ªÉ thu th·∫≠p & ph√¢n t√≠ch")
    alpha0 = st.number_input("alpha0 (Dirichlet total prior strength)",
                             min_value=1.0, max_value=1000.0, value=200.0, step=10.0,
                             help="ƒê·ªô m·∫°nh c·ªßa prior ƒë·ªÅu 1%. D·ªØ li·ªáu √≠t ‚Üí alpha0 l·ªõn; d·ªØ li·ªáu d√†i ‚Üí alpha0 nh·ªè.")
    threshold = st.number_input("Ng∆∞·ª°ng posterior (vd 0.013 = 1.3%)",
                                min_value=0.0, max_value=0.1, value=0.013, step=0.001, format="%.3f")
    topk = st.slider("S·ªë c·∫∑p g·ª£i √Ω t·ªëi ƒëa", 5, 30, 10, 1)
    st.markdown("---")
    crawl_btn = st.button("üöÄ Crawl & Ph√¢n t√≠ch", use_container_width=True)

tabs = st.tabs(["üìä K·∫øt qu·∫£ ph√¢n t√≠ch", "üìÅ Quick view d·ªØ li·ªáu `data/`", "üì§ T·∫£i l√™n & Ph√¢n t√≠ch"])

# ============ MAIN TAB 1: RUN + SHOW ============
with tabs[0]:
    if crawl_btn:
        with st.spinner("ƒêang thu th·∫≠p v√† ph√¢n t√≠ch‚Ä¶"):
            day2pairs = crawl(window)                 # l·∫•y 60/90 ng√†y
            df, N, days = counts_from_days(day2pairs) # ƒë·∫øm 00‚Äì99
            df = dirichlet_smoothing(df, N, alpha0)   # Bayes smoothing
            chi2_stat, pval = chi_square_test(df, N)   # ki·ªÉm ƒë·ªãnh
            ranked = rank(df)

        # Summary cards
        c1, c2, c3, c4 = st.columns(4)
        c1.metric("S·ªë ng√†y thu th·∫≠p", f"{days}")
        c2.metric("T·ªïng l∆∞·ª£t 2 s·ªë", f"{N:,}")
        c3.metric("Chi-square", f"{chi2_stat:,.2f}")
        c4.metric("p-value", f"{pval:.6f}")

        # Hint box
        st.markdown(
            '<div class="info-card small">M·ªëc tham chi·∫øu: trung b√¨nh l√Ω thuy·∫øt ‚âà 1% cho m·ªói c·∫∑p 00‚Äì99. '
            'N·∫øu <b>p-value &lt; 0.05</b> ‚áí c√≥ l·ªách ƒë√°ng k·ªÉ so v·ªõi ƒë·ªÅu; ng∆∞·ª£c l·∫°i th√¨ coi nh∆∞ g·∫ßn ng·∫´u nhi√™n.</div>',
            unsafe_allow_html=True
        )

        # Suggestions
        st.subheader("‚≠ê Top g·ª£i √Ω theo posterior")
        suggest = ranked[ranked["post_p"] >= threshold].head(topk)
        st.dataframe(
            suggest[["cap", "count", "freq", "post_p"]]
            .rename(columns={"cap": "c·∫∑p", "count": "l∆∞·ª£t", "freq": "t·∫ßn su·∫•t", "post_p": "posterior"}),
            use_container_width=True,
            hide_index=True
        )

        # Full table in expander
        with st.expander("Xem b·∫£ng ƒë·∫ßy ƒë·ªß 00‚Äì99"):
            st.dataframe(
                ranked[["cap","count","freq","post_p"]]
                .rename(columns={"cap": "c·∫∑p", "count": "l∆∞·ª£t", "freq": "t·∫ßn su·∫•t", "post_p": "posterior"}),
                use_container_width=True, hide_index=True
            )

        # Save & downloads
        os.makedirs("data", exist_ok=True)
        ranked.to_csv("data/xsmb_ranked.csv", index=False, encoding="utf-8-sig")
        df.to_csv("data/xsmb_full.csv", index=False, encoding="utf-8-sig")

        cL, cR = st.columns([1,1])
        with cL:
            st.download_button("‚¨áÔ∏è T·∫£i b·∫£ng x·∫øp h·∫°ng (CSV)",
                               data=open("data/xsmb_ranked.csv","rb").read(),
                               file_name="xsmb_ranked.csv", mime="text/csv", use_container_width=True)
        with cR:
            st.download_button("‚¨áÔ∏è T·∫£i b·∫£ng ƒë·∫ßy ƒë·ªß (CSV)",
                               data=open("data/xsmb_full.csv","rb").read(),
                               file_name="xsmb_full.csv", mime="text/csv", use_container_width=True)
    else:
        st.markdown(
            '<div class="info-card">Ch·ªçn tham s·ªë trong <b>Sidebar</b> r·ªìi nh·∫•n <b>üöÄ Crawl & Ph√¢n t√≠ch</b> ƒë·ªÉ b·∫Øt ƒë·∫ßu.</div>',
            unsafe_allow_html=True
        )

# ============ TAB 2: QUICK VIEW FROM /data ============
with tabs[1]:
    st.write("Hi·ªÉn th·ªã nhanh c√°c file CSV ƒë√£ ƒë∆∞·ª£c l∆∞u trong th∆∞ m·ª•c `data/` (do workflow ho·∫∑c l·∫ßn ch·∫°y tr∆∞·ªõc t·∫°o).")
    colA, colB = st.columns([1,1])
    with colA:
        path_ranked = "data/xsmb_ranked.csv"
        if os.path.exists(path_ranked):
            st.success("ƒê√£ t√¨m th·∫•y `data/xsmb_ranked.csv`")
            df_ranked = pd.read_csv(path_ranked)
            st.dataframe(df_ranked.head(20), use_container_width=True, hide_index=True)
        else:
            st.warning("Ch∆∞a c√≥ `data/xsmb_ranked.csv` trong repo.")
    with colB:
        path_full = "data/xsmb_full.csv"
        if os.path.exists(path_full):
            st.success("ƒê√£ t√¨m th·∫•y `data/xsmb_full.csv`")
            df_full = pd.read_csv(path_full)
            st.dataframe(df_full.head(20), use_container_width=True, hide_index=True)
        else:
            st.warning("Ch∆∞a c√≥ `data/xsmb_full.csv` trong repo.")

# ============ TAB 3: UPLOAD YOUR OWN ============
with tabs[2]:
    st.write("T·∫£i l√™n CSV tu·ª≥ ch·ªânh (c·∫ßn t·ªëi thi·ªÉu 2 c·ªôt: `cap` v√† `count`).")
    upl = st.file_uploader("Ch·ªçn file CSV c·ªßa b·∫°n", type=["csv"])
    alpha0_u = st.number_input("alpha0 cho file t·∫£i l√™n", min_value=1.0,
                               max_value=1000.0, value=200.0, step=10.0, key="alpha_u")
    if upl:
        dfu = pd.read_csv(upl)
        if not {"cap","count"}.issubset(set(dfu.columns)):
            st.error("CSV ph·∫£i c√≥ c·ªôt 'cap' v√† 'count'.")
        else:
            N_u = int(dfu["count"].sum())
            dfu2 = dirichlet_smoothing(dfu, N_u, alpha0_u)
            chi2_stat_u, pval_u = chi_square_test(dfu2, N_u)

            c1, c2 = st.columns(2)
            c1.metric("T·ªïng l∆∞·ª£t 2 s·ªë (upload)", f"{N_u:,}")
            c2.metric("p-value (upload)", f"{pval_u:.6f}")

            st.dataframe(rank(dfu2)[["cap","count","freq","post_p"]],
                         use_container_width=True, hide_index=True)
