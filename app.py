# -*- coding: utf-8 -*-
import os
import io
import pandas as pd
import streamlit as st

from crawler import crawl
from bayes import counts_from_days, dirichlet_smoothing, chi_square_test, rank

st.set_page_config(page_title="XSMB Loto Bayes 60‚Äì90 ng√†y", layout="wide")

st.title("XSMB Loto ‚Äì Bayes/Dirichlet")
tab1, tab2 = st.tabs(["üì• Crawl & Ph√¢n t√≠ch", "üì§ T·∫£i l√™n & Ph√¢n t√≠ch"])

with tab1:
    colL, colR = st.columns([1,1])
    with colL:
        window = st.selectbox("C·ª≠a s·ªï d·ªØ li·ªáu", ["60", "90"], index=0,
                              help="Thu th·∫≠p 60 ho·∫∑c 90 ng√†y g·∫ßn nh·∫•t")
        alpha0 = st.number_input("alpha0 (Dirichlet total prior strength)",
                                 min_value=1.0, max_value=1000.0, value=200.0, step=10.0)
        threshold = st.number_input("Ng∆∞·ª°ng posterior (v√≠ d·ª• 0.013 = 1.3%)",
                                    min_value=0.0, max_value=0.1, value=0.013, step=0.001, format="%.3f")
        topk = st.slider("S·ªë c·∫∑p g·ª£i √Ω t·ªëi ƒëa", 5, 30, 10, 1)
        run_btn = st.button("üöÄ Crawl & Ph√¢n t√≠ch", use_container_width=True)

    if run_btn:
        with st.spinner("ƒêang thu th·∫≠p d·ªØ li·ªáu ‚Ä¶"):
            day2pairs = crawl(window)
        df, N, days = counts_from_days(day2pairs)
        df = dirichlet_smoothing(df, N, alpha0)
        chi2_stat, pval = chi_square_test(df, N)
        ranked = rank(df)

        st.success(f"ƒê√£ thu th·∫≠p {days} ng√†y ‚Äì t·ªïng l∆∞·ª£t 2 s·ªë: {N}")
        st.write(f"**Chi-square:** {chi2_stat:,.2f} | **p-value:** {pval:.6f}")
        st.caption("N·∫øu p-value < 0.05 ‚áí c√≥ l·ªách ƒë√°ng k·ªÉ so v·ªõi ph√¢n ph·ªëi ƒë·ªÅu 1%.")

        st.subheader("Top g·ª£i √Ω theo posterior")
        suggest = ranked[ranked["post_p"] >= threshold].head(topk)
        st.dataframe(suggest[["cap", "count", "freq", "post_p"]], use_container_width=True)

        # L∆∞u CSV v√†o /data v√† cho ph√©p t·∫£i
        os.makedirs("data", exist_ok=True)
        ranked.to_csv("data/xsmb_ranked.csv", index=False, encoding="utf-8-sig")
        df.to_csv("data/xsmb_full.csv", index=False, encoding="utf-8-sig")

        st.download_button("T·∫£i b·∫£ng x·∫øp h·∫°ng (CSV)", data=open("data/xsmb_ranked.csv","rb").read(),
                           file_name="xsmb_ranked.csv", mime="text/csv")
        st.download_button("T·∫£i b·∫£ng ƒë·∫ßy ƒë·ªß (CSV)", data=open("data/xsmb_full.csv","rb").read(),
                           file_name="xsmb_full.csv", mime="text/csv")

with tab2:
    st.write("B·∫°n c√≥ th·ªÉ **t·∫£i l√™n** 1 CSV t·ª± th·ªëng k√™ (c·ªôt `cap`, `count`) ƒë·ªÉ ch·∫°y m√¥ h√¨nh.")
    upl = st.file_uploader("T·∫£i CSV c·ªßa b·∫°n", type=["csv"])
    alpha0_u = st.number_input("alpha0 cho file t·∫£i l√™n", min_value=1.0,
                               max_value=1000.0, value=200.0, step=10.0, key="alpha_u")
    if upl:
        dfu = pd.read_csv(upl)
        if not {"cap","count"}.issubset(set(dfu.columns)):
            st.error("CSV c·∫ßn c√≥ c·ªôt 'cap' v√† 'count'.")
        else:
            N = int(dfu["count"].sum())
            dfu = dirichlet_smoothing(dfu, N, alpha0_u)
            chi2_stat, pval = chi_square_test(dfu, N)
            st.write(f"**Chi-square:** {chi2_stat:,.2f} | **p-value:** {pval:.6f}")
            st.dataframe(rank(dfu)[["cap","count","freq","post_p"]], use_container_width=True)
